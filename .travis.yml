os: linux
dist: focal
language: python

stages:
  - test
  - name: deploy
    # to only build tags
    #   if: tag IS PRESENT AND repo = pypa/cibuildwheel
    # To only build tags that look like vX.Y.Z:
    #   if: tag =~ ^v\d+\.\d+\.\d+$ AND repo = pypa/cibuildwheel

jobs:
  include:
    # Deploy source distribution
    - stage: deploy
      name: Deploy source distribution
      install: skip
      script: |
        python3 setup.py sdist --formats=gztar
        python3 -m pip install twine
        python3 -m twine upload --skip-existing dist/*.tar.gz
      
    # Deploy on linux
    - stage: deploy
      name: Build and deploy Linux wheels
      services: docker
      install: python3 -m pip install cibuildwheel
      script: |
        python3 -m cibuildwheel --output-dir wheelhouse
        python3 -m pip install twine
        python3 -m twine upload --skip-existing wheelhouse/*.whl
    
    # Deploy on windows
    - stage: deploy
      name: Build and deploy Windows wheels
      os: windows
      language: shell
      install: python3 -m pip install cibuildwheel
      script: |
        python3 -m cibuildwheel --output-dir wheelhouse
        python3 -m pip install twine
        python3 -m twine upload --skip-existing wheelhouse/*.whl

        

before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" = windows ]]; then
        choco upgrade python -y --version 3.8
        export PATH="/c/Python38:/c/Python38/Scripts:$PATH"
        # make sure it's on PATH as 'python3'
        ln -s /c/Python38/python.exe /c/Python38/python3.exe
    fi

install:
  - python3 -m pip install cython

script:
  - python3 setup.py install
  # TODO add automated tests


deploy:
  provider: releases
  skip_cleanup: true
  file_glob: true

env:
  global:
    - CIBW_BUILD=cp39-*
    - TWINE_USERNAME=__token__
    # TWINE_PASSWORD
    - secure: gI7OeZLn0Xd8Z7Wd9wGoPwwzKVb+AoKD5LA0cCh/DGcWQU3bo79EB8B+gx9I2B+lxXUviQS9K5EhUfs0jof4Mjh7fGuYLFrznbtAqLl9g3lBmHGpFeFqqHzcCSYPcxbPRnuIrgUhQ07RHcZSPWKwFqdpCXajPC3W+i52NZ0DKT9G2c0u9QUigLfjhVC9IJbd7CZaGlFBnNWuRC0FhbDXvJYhNZctEXKXgtBjpAkOQfqfl/l1e51qVTcl1KDK8fLERCOpO9TGwpmfdzkwD7T49z+1Dwev1EfPvu9FLezWTWir9G7HP+LobUZpgnFS87HCbKGFzVvtcLiboyQgRd7iYDYfXImrwiyuLduGsvXFYXI7Dj3QMY8aJ/ochyCQPHnUu55ThasCr4TKHTm8sKDgrsnppiqLlObT/jNi0qhcEoLCxI7nb9tDBKu3NWqRmUOOPy3wUA73dJ/E8vAYlfMJKewzZemSdfddir3Mv+G4ZowZZXtBxRnByrrJUavdEUwmxObq6d1VPMfXcnZ5QxIotIZSzuEHToKy+DhyHxX6ET2jnlrgMBO0nHN11I2v/h4b6Mv6RIzfIVvBhB9JzBdlNFFHFbkvHUXlDkqWRacmpPRxtiHKVXDH7YHGGc1R8EjXn/l/fhTgPMhEXPViE3wnBO5JQyyxULSL47Y5wkEUiaE=
